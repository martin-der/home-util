group 'net.tetrakoopa'


def getVersionName = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

version getVersionName

def distributedName = "${project.name}-${project.version}"

def distributionDirectory = 'output/distrib'


/*task wrapper(type: Wrapper) {
	gradleVersion = '3.4.1'
}*/

task doc() {

	doLast {

		def shellScripts = fileTree('./').include('*.sh')
		def docDir = new File("output/doc")

		if (!docDir.exists()) docDir.mkdirs()

		shellScripts.each { File file ->
			def document = new File(docDir, "${file.name}.md")
			exec {
				commandLine 'build/tool/shdoc/shdoc_io_w.sh', "${file.name}", "${document.path}"
			}
			if(!(document.length()>0) || document.text.matches("[\n \t]*") ) document.delete()
		}

	}

}

task archiveZip(type: Zip, dependsOn: 'doc') {

	baseName = "home-util-${project.version}"

	destinationDir = new File("${distributionDirectory}/final")

	from fileTree('./').include('doc/**', '*.sh', '*.py', 'README.md')
	from fileTree("output").include('doc/**')
}

task selfExtractingArchive( dependsOn: 'archiveZip') {

	doLast {

		copy {
			from zipTree(file("${distributionDirectory}/final/${distributedName}.zip"))
			into "${distributionDirectory}/installer/unpacked"
		}
		copy {
			from file('build/template/install.sh')
			into "${distributionDirectory}/installer"
		}

		exec {
			workingDir "${distributionDirectory}"
			commandLine 'shar', 'installer'
			standardOutput = new FileOutputStream("$projectDir/${distributionDirectory}/${distributedName}.shar")
		}

		def shar = new File("${distributionDirectory}/final/${distributedName}.run")
		if (shar.exists()) shar.delete()

		shar.append(new File('build/template/install-pre.sh').text)

		shar.append("# *** Application variables *** \n")
		shar.append("MDU_INSTALL_APPLICATION_NAME=${project.name}\n")
		shar.append("MDU_INSTALL_APPLICATION_LABEL=${project.name}\n")
		shar.append("MDU_INSTALL_APPLICATION_VERSION=${project.version}\n")
		shar.append("\n")

		shar.append(new File("${distributionDirectory}/${distributedName}.shar").text.replaceAll('\nexit[ ]+0[\n ]*$', "\n"))
		shar.append(new File("build/template/install-post.sh").text)

	}

}


