group 'net.tetrakoopa'


def getVersionName = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

version getVersionName

def distributedName = "${project.name}-${project.version}"


/*task wrapper(type: Wrapper) {
	gradleVersion = '3.4.1'
}*/

task archiveZip(type: Zip) {

	baseName = "home-util-${project.version}"

	destinationDir = new File('output/distrib/final')

	from fileTree('./').include('*.sh', '*.py', 'README.md')
}

task selfExtractingArchive( dependsOn: 'archiveZip') {

	doLast {

		copy {
			from zipTree(file("output/distrib/final/${distributedName}.zip"))
			into 'output/installer/unpacked'
		}
		copy {
			from file('build/template/install.sh')
			into 'output/installer'
		}

		exec {
			workingDir 'output'
			commandLine 'shar', 'installer'
			standardOutput = new FileOutputStream("$projectDir/output/distrib/${distributedName}.shar")
		}

		def shar = new File("output/distrib/final/${distributedName}.run")
		if (shar.exists()) shar.delete()

		shar.append(new File('build/template/install-pre.sh').text)

		shar.append("# *** Application variables *** \n")
		shar.append("MDU_INSTALL_APPLICATION_NAME=${project.name}\n")
		shar.append("MDU_INSTALL_APPLICATION_LABEL=${project.name}\n")
		shar.append("MDU_INSTALL_APPLICATION_VERSION=${project.version}\n")
		shar.append("\n")

		shar.append(new File("$projectDir/output/distrib/${distributedName}.shar").text.replaceAll('\nexit[ ]+0[\n ]*$', "\n"))
		shar.append(new File('build/template/install-post.sh').text)

	}

}


