group 'net.tetrakoopa'

/*class MyDownload extends DefaultTask {

	@Input
	String sourceUrl

	@OutputFile
	File target

	@TaskAction
	void download() {
		def f = new File(sourceUrl)
		if (!f.exists()) {
			new URL('the url').withInputStream{ i -> f.withOutputStream{ it << i }}
		}
	}
}*/

def getVersionName = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

version getVersionName

def distributedName = "home-util-${project.version}"


/*task wrapper(type: Wrapper) {
	gradleVersion = '3.4.1'
}*/

task archiveZip(type: Zip) {

	baseName = "home-util-${project.version}"

	destinationDir = new File('output/distrib/final')

	from fileTree('./').include('*.sh', '*.py', 'README.md')
}

task selfExtractingArchive( dependsOn: 'archiveZip') {

	doLast {

		/*task downloadSomething(type: MyDownload) {
			sourceUrl = 'https://raw.githubusercontent.com/megastep/makeself/master/makeself.sh'
			target = file('build/makeself.sh')
		}*/

		/*new File('build/tool/makeself').mkdirs()
		// https://raw.githubusercontent.com/megastep/makeself/master/makeself.sh
		def f = new File('build/tool/makeself/makeself.sh')
		if (!f.exists()) {
			new URL('https://raw.githubusercontent.com/megastep/makeself/master/makeself.sh').withInputStream{ i -> f.withOutputStream{ it << i }}
		}
		f = new File('build/tool/makeself/makeself-header.sh')
		if (!f.exists()) {
			new URL('https://raw.githubusercontent.com/megastep/makeself/master/makeself-header.sh').withInputStream{ i -> f.withOutputStream{ it << i }}
		}*/

		copy {
			from zipTree(file("output/distrib/final/${distributedName}.zip"))
			into 'output/installer/unpacked'
		}
		copy {
			from file('build/template/install.sh')
			into 'output/installer'
		}


		/*exec {
			commandLine 'sh', 'build/tool/makeself/makeself.sh', './output/installer', "output/distrib/${distributedName}.run", "Home-Util", './install.sh'
		}*/
		exec {
			workingDir 'output'
			commandLine 'shar', 'installer'
			standardOutput = new FileOutputStream("$projectDir/output/distrib/${distributedName}.shar")
		}

		def shar = new File("output/distrib/final/${distributedName}.run")
		if (shar.exists()) shar.delete()

		shar.append(new File('build/template/install-pre.sh').text)
		shar.append(new File("$projectDir/output/distrib/${distributedName}.shar").text.replaceAll('\nexit 0[\n]*$', "\n"))
		shar.append(new File('build/template/install-post.sh').text)

	}

}


